cat("Recall: ", recall, "\n")
f1_score <- 2 * ((precision * recall) / (precision + recall))
cat("F1-Score: ", f1_score, "\n")
# Crear un data frame con las métricas
metrics_df <- data.frame(
Metric = c("Accuracy", "Precision", "Recall", "F1-Score"),
Value = c(0.69, 0.6838726, 0.7088102, 0.6961182)
)
# Crear el gráfico de barras con etiquetas de porcentaje y una escala de colores
ggplot(metrics_df, aes(x = Metric, y = Value, fill = Value)) +
geom_bar(stat = "identity") +
geom_text(aes(label = scales::percent(Value)), vjust = -0.3, size = 4) +  # Etiquetas en las barras
ylim(0, 1) +  # Ajustar el eje y para que vaya de 0 a 1
labs(title = "Métricas del Modelo de Clasificación",
x = "Métrica",
y = "Valor") +
scale_fill_gradient(low = "blue", high = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
#install.packages("rpart")
#install.packages("writexl")
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("rpart.plot")
#install.packages("caret")
#install.packages("pROC")
#install.packages("plotly")
library(rpart)
library(writexl)
library(dplyr)
library(ggplot2)
library(rpart.plot)
library(caret)
library(pROC)
library(plotly)
library(reshape2)
library(scales)
# Cargamos los datos
#fumadores = read.csv("data/smoking_driking_dataset_Ver01.csv", header = TRUE, sep = ",")
fumadores_50 <- read.csv("data/reducido.csv", header = TRUE, sep = ",")
# Verificar el número de observaciones y predictores
#num_observaciones <- nrow(fumadores)
#num_predictores <- ncol(fumadores)
num_observaciones <- nrow(fumadores_50)
num_predictores <- ncol(fumadores_50)
cat("Número de observaciones:", num_observaciones, "\n")
cat("Número de predictores:", num_predictores, "\n")
# Achicamos la informacion en terminos de observaciones
set.seed(44512364)
# fumadores_50 <- fumadores[sample(nrow(fumadores), 50000), ]
# write.csv(fumadores_50, "data/reducido.csv", row.names = FALSE)
# Modificamos las variables categoricas de numeros a palabras:
# Modificar la variable 'hear_left'
fumadores_50$hear_left <- factor(fumadores_50$hear_left,
levels = c(1.0, 2.0),
labels = c("normal", "abnormal"))
# Modificar la variable 'hear_right'
fumadores_50$hear_right <- factor(fumadores_50$hear_right,
levels = c(1.0, 2.0),
labels = c("normal", "abnormal"))
# Modificar la variable 'SMK_stat_type_cd'
fumadores_50$SMK_stat_type_cd <- factor(fumadores_50$SMK_stat_type_cd,
levels = c(1.0, 2.0, 3.0),
labels = c("never", "used to smoke but quit", "still smoke"))
# Modificar la variable 'urine_protein'
fumadores_50$urine_protein <- factor(fumadores_50$urine_protein,
levels = c(1, 2, 3, 4, 5, 6),
labels = c("Negativo (-)", "Trazas (+/-)", "Bajo (+1)",
"Moderado (+2)", "Alto (+3)", "Muy alto (+4)"))
# Modificar la variable 'DRK_YN'
fumadores_50$DRK_YN <- as.factor(fumadores_50$DRK_YN)
# Definir el vector con los nombres de las variables principales
variables <- c("age", "gamma_GTP", "HDL_chole", "waistline", "SBP", "LDL_chole", "triglyceride", "hemoglobin", "SGOT_AST", "SGOT_ALT", "BLDS")
# Seleccionar las variables principales
variables_principales <- fumadores_50[, variables]
# Mostrar la estructura de las variables seleccionadas
str(variables_principales)
# Crear el scatter plot para Gamma-GTP con línea de regresión
ggplot(fumadores_50, aes(x = as.factor(DRK_YN), y = gamma_GTP, fill = as.factor(DRK_YN))) +
geom_boxplot(alpha = 0.5) +
geom_smooth(method = "lm", aes(group = 1, color = "Trend"), se = FALSE) +  # Línea de regresión
ylim(0, 50) +  # Ajustar el eje y
labs(
title = "Gamma-GTP según Consumo de Alcohol",
x = "Consumo de Alcohol (0 = No, 1 = Sí)",
y = "Gamma-GTP"
) +
scale_fill_manual(values = c("light blue", "blue")) +
scale_color_manual(name = "Trend", values = c("blue")) +
theme_minimal() +
theme(legend.position = "none")
ggplot(fumadores_50, aes(x = as.factor(DRK_YN), y = SGOT_AST, fill = as.factor(DRK_YN))) +
geom_boxplot(alpha = 0.5) +
geom_smooth(method = "lm", aes(group = 1, color = "Trend"), se = FALSE) +  # Línea de regresión
ylim(0, 50) +  # Ajustar el eje y
labs(
title = "SGOT/AST según Consumo de Alcohol",
x = "Consumo de Alcohol (0 = No, 1 = Sí)",
y = "SGOT/AST"
) +
scale_fill_manual(values = c("light blue", "blue")) +  # Colores personalizados
scale_color_manual(name = "Trend", values = c("blue")) +  # Color para la línea de tendencia
theme_minimal() +
theme(legend.position = "none")
ggplot(fumadores_50, aes(x = as.factor(DRK_YN), y = triglyceride, fill = as.factor(DRK_YN))) +
geom_boxplot(alpha = 0.5) +
geom_smooth(method = "lm", aes(group = 1, color = "Trend"), se = FALSE) +  # Línea de regresión
ylim(0, 50) +  # Ajustar el eje y
labs(
title = "Triglicéridos según Consumo de Alcohol",
x = "Consumo de Alcohol (0 = No, 1 = Sí)",
y = "Triglicéridos"
) +
scale_fill_manual(values = c("light blue", "blue")) +  # Colores personalizados
scale_color_manual(name = "Trend", values = c("blue")) +  # Color para la línea de tendencia
theme_minimal() +
theme(legend.position = "none")
# Guardamos el número total de observaciones en el conjunto de datos
n <- nrow(fumadores_50)
# Definimos el tamaño de los conjuntos de entrenamiento, validación y testeo
n_train <- floor(0.70 * n)    # Asigno el 70% de las observaciones para entrenamiento
n_val <- floor(0.15 * n)      # Asigno el 15% de las observaciones para validación
n_test <- n - n_train - n_val # Asigno el resto para testeo.
# Creamos una secuencia de índices aleatorios para dividir los datos
indices <- sample(1:n)
# Dividimos los índices en los tres conjuntos
train_indices <- indices[1:n_train]
val_indices <- indices[(n_train + 1):(n_train + n_val)]
test_indices <- indices[(n_train + n_val + 1):n]
train_data <- fumadores_50[train_indices, ]
val_data <- fumadores_50[val_indices, ]
test_data <- fumadores_50[test_indices, ]
# Arbol
# Defino los parámetros de control para el modelo de árbol de decisión
control_params <- rpart.control(
minsplit = 20,             # Número mínimo de observaciones necesarias para dividir un nodo
minbucket = round(20/3),   # Número mínimo de observaciones en una hoja
cp = 0.001,                # Parámetro de complejidad para evitar el sobreajuste
xval = 10,                 # Número de particiones en la validación cruzada
maxdepth = 30              # Profundidad máxima del árbol
)
# Creamos el modelo de árbol de decisión usando el conjunto de entrenamiento
arbol_1 <- rpart(formula = DRK_YN ~ gamma_GTP + SGOT_AST + SGOT_ALT + BLDS + HDL_chole + LDL_chole + triglyceride + age + hemoglobin,
data = train_data, method = "class", control = control_params)
# Visualización del arbol
rpart.plot(arbol_1)
# Predecir las probabilidades
pred_prob <- predict(arbol_1, newdata = test_data, type = "prob")
# Predecir las clases
pred_class <- predict(arbol_1, newdata = test_data, type = "class")
head(pred_prob)
head(pred_class)
# Calcular la matriz de confusión
matriz_confusion <- table(Predicted = pred_class, Actual = test_data$DRK_YN)
# Convertir la matriz de confusión a un data frame en formato largo
matriz_confusion_df <- as.data.frame(melt(matriz_confusion))
# Crear el gráfico de la matriz de confusión
ggplot(matriz_confusion_df, aes(x = Actual, y = Predicted, fill = value)) +
geom_tile(color = "blue") +
geom_text(aes(label = value), vjust = 1) +
scale_fill_gradient(low = "white", high = "light blue") +
labs(title = "Matriz de Confusión",
x = "Clase Actual",
y = "Clase Predicha",
fill = "Frecuencia") +
theme_minimal()
accuracy <- sum(diag(matriz_confusion)) / sum(matriz_confusion)
cat("Accuracy: ", accuracy, "\n")
precision <- matriz_confusion["Y", "Y"] / (matriz_confusion["Y", "Y"] + matriz_confusion["Y", "N"])
recall <- matriz_confusion["Y", "Y"] / (matriz_confusion["Y", "Y"] + matriz_confusion["N", "Y"])
cat("Precision: ", precision, "\n")
cat("Recall: ", recall, "\n")
f1_score <- 2 * ((precision * recall) / (precision + recall))
cat("F1-Score: ", f1_score, "\n")
# Crear un data frame con las métricas
metrics_df <- data.frame(
Metric = c("Accuracy", "Precision", "Recall", "F1-Score"),
Value = c(0.69, 0.6838726, 0.7088102, 0.6961182)
)
# Crear el gráfico de barras con etiquetas de porcentaje y una escala de colores
ggplot(metrics_df, aes(x = Metric, y = Value, fill = Value)) +
geom_bar(stat = "identity") +
geom_text(aes(label = scales::percent(Value)), vjust = -0.3, size = 4) +  # Etiquetas en las barras
ylim(0, 1) +  # Ajustar el eje y para que vaya de 0 a 1
labs(title = "Métricas del Modelo de Clasificación",
x = "Métrica",
y = "Valor") +
scale_fill_gradient(low = "blue", high = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
roc_curve <- roc(test_data$DRK_YN, pred_prob[, "Y"], levels = rev(levels(test_data$DRK_YN)))
plot(roc_curve, col = "blue", main = "ROC Curve")
# Calcular el valor AUC
auc_value <- auc(roc_curve)
cat("AUC-ROC: ", auc_value, "\n")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("rpart")
#install.packages("writexl")
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("rpart.plot")
#install.packages("caret")
#install.packages("pROC")
#install.packages("plotly")
library(rpart)
library(writexl)
library(dplyr)
library(ggplot2)
library(rpart.plot)
library(caret)
library(pROC)
library(plotly)
library(reshape2)
library(scales)
# Cargamos los datos
#fumadores = read.csv("data/smoking_driking_dataset_Ver01.csv", header = TRUE, sep = ",")
fumadores_50 <- read.csv("data/reducido.csv", header = TRUE, sep = ",")
# Verificar el número de observaciones y predictores
#num_observaciones <- nrow(fumadores)
#num_predictores <- ncol(fumadores)
num_observaciones <- nrow(fumadores_50)
num_predictores <- ncol(fumadores_50)
cat("Número de observaciones:", num_observaciones, "\n")
cat("Número de predictores:", num_predictores, "\n")
# Achicamos la informacion en terminos de observaciones
set.seed(44512364)
# fumadores_50 <- fumadores[sample(nrow(fumadores), 50000), ]
# write.csv(fumadores_50, "data/reducido.csv", row.names = FALSE)
# Modificamos las variables categoricas de numeros a palabras:
# Modificar la variable 'hear_left'
fumadores_50$hear_left <- factor(fumadores_50$hear_left,
levels = c(1.0, 2.0),
labels = c("normal", "abnormal"))
# Modificar la variable 'hear_right'
fumadores_50$hear_right <- factor(fumadores_50$hear_right,
levels = c(1.0, 2.0),
labels = c("normal", "abnormal"))
# Modificar la variable 'SMK_stat_type_cd'
fumadores_50$SMK_stat_type_cd <- factor(fumadores_50$SMK_stat_type_cd,
levels = c(1.0, 2.0, 3.0),
labels = c("never", "used to smoke but quit", "still smoke"))
# Modificar la variable 'urine_protein'
fumadores_50$urine_protein <- factor(fumadores_50$urine_protein,
levels = c(1, 2, 3, 4, 5, 6),
labels = c("Negativo (-)", "Trazas (+/-)", "Bajo (+1)",
"Moderado (+2)", "Alto (+3)", "Muy alto (+4)"))
# Modificar la variable 'DRK_YN'
fumadores_50$DRK_YN <- as.factor(fumadores_50$DRK_YN)
# Definir el vector con los nombres de las variables principales
variables <- c("age", "gamma_GTP", "HDL_chole", "waistline", "SBP", "LDL_chole", "triglyceride", "hemoglobin", "SGOT_AST", "SGOT_ALT", "BLDS")
# Seleccionar las variables principales
variables_principales <- fumadores_50[, variables]
# Mostrar la estructura de las variables seleccionadas
str(variables_principales)
# Crear el scatter plot para Gamma-GTP con línea de regresión
ggplot(fumadores_50, aes(x = as.factor(DRK_YN), y = gamma_GTP, fill = as.factor(DRK_YN))) +
geom_boxplot(alpha = 0.5) +
geom_smooth(method = "lm", aes(group = 1, color = "Trend"), se = FALSE) +  # Línea de regresión
ylim(0, 50) +  # Ajustar el eje y
labs(
title = "Gamma-GTP según Consumo de Alcohol",
x = "Consumo de Alcohol (0 = No, 1 = Sí)",
y = "Gamma-GTP"
) +
scale_fill_manual(values = c("light blue", "blue")) +
scale_color_manual(name = "Trend", values = c("blue")) +
theme_minimal() +
theme(legend.position = "none")
ggplot(fumadores_50, aes(x = as.factor(DRK_YN), y = SGOT_AST, fill = as.factor(DRK_YN))) +
geom_boxplot(alpha = 0.5) +
geom_smooth(method = "lm", aes(group = 1, color = "Trend"), se = FALSE) +  # Línea de regresión
ylim(0, 50) +  # Ajustar el eje y
labs(
title = "SGOT/AST según Consumo de Alcohol",
x = "Consumo de Alcohol (0 = No, 1 = Sí)",
y = "SGOT/AST"
) +
scale_fill_manual(values = c("light blue", "blue")) +  # Colores personalizados
scale_color_manual(name = "Trend", values = c("blue")) +  # Color para la línea de tendencia
theme_minimal() +
theme(legend.position = "none")
ggplot(fumadores_50, aes(x = as.factor(DRK_YN), y = triglyceride, fill = as.factor(DRK_YN))) +
geom_boxplot(alpha = 0.5) +
geom_smooth(method = "lm", aes(group = 1, color = "Trend"), se = FALSE) +  # Línea de regresión
ylim(0, 50) +  # Ajustar el eje y
labs(
title = "Triglicéridos según Consumo de Alcohol",
x = "Consumo de Alcohol (0 = No, 1 = Sí)",
y = "Triglicéridos"
) +
scale_fill_manual(values = c("light blue", "blue")) +  # Colores personalizados
scale_color_manual(name = "Trend", values = c("blue")) +  # Color para la línea de tendencia
theme_minimal() +
theme(legend.position = "none")
# Guardamos el número total de observaciones en el conjunto de datos
n <- nrow(fumadores_50)
# Definimos el tamaño de los conjuntos de entrenamiento, validación y testeo
n_train <- floor(0.70 * n)    # Asigno el 70% de las observaciones para entrenamiento
n_val <- floor(0.15 * n)      # Asigno el 15% de las observaciones para validación
n_test <- n - n_train - n_val # Asigno el resto para testeo.
# Creamos una secuencia de índices aleatorios para dividir los datos
indices <- sample(1:n)
# Dividimos los índices en los tres conjuntos
train_indices <- indices[1:n_train]
val_indices <- indices[(n_train + 1):(n_train + n_val)]
test_indices <- indices[(n_train + n_val + 1):n]
train_data <- fumadores_50[train_indices, ]
val_data <- fumadores_50[val_indices, ]
test_data <- fumadores_50[test_indices, ]
# Arbol
# Defino los parámetros de control para el modelo de árbol de decisión
control_params <- rpart.control(
minsplit = 20,             # Número mínimo de observaciones necesarias para dividir un nodo
minbucket = round(20/3),   # Número mínimo de observaciones en una hoja
cp = 0.001,                # Parámetro de complejidad para evitar el sobreajuste
xval = 10,                 # Número de particiones en la validación cruzada
maxdepth = 30              # Profundidad máxima del árbol
)
# Creamos el modelo de árbol de decisión usando el conjunto de entrenamiento
arbol_1 <- rpart(formula = DRK_YN ~ gamma_GTP + SGOT_AST + SGOT_ALT + BLDS + HDL_chole + LDL_chole + triglyceride + age + hemoglobin,
data = train_data, method = "class", control = control_params)
# Visualización del arbol
rpart.plot(arbol_1)
# Predecir las probabilidades
pred_prob <- predict(arbol_1, newdata = test_data, type = "prob")
# Predecir las clases
pred_class <- predict(arbol_1, newdata = test_data, type = "class")
head(pred_prob)
head(pred_class)
# Calcular la matriz de confusión
matriz_confusion <- table(Predicted = pred_class, Actual = test_data$DRK_YN)
# Convertir la matriz de confusión a un data frame en formato largo
matriz_confusion_df <- as.data.frame(melt(matriz_confusion))
# Crear el gráfico de la matriz de confusión
ggplot(matriz_confusion_df, aes(x = Actual, y = Predicted, fill = value)) +
geom_tile(color = "blue") +
geom_text(aes(label = value), vjust = 1) +
scale_fill_gradient(low = "white", high = "light blue") +
labs(title = "Matriz de Confusión",
x = "Clase Actual",
y = "Clase Predicha",
fill = "Frecuencia") +
theme_minimal()
accuracy <- sum(diag(matriz_confusion)) / sum(matriz_confusion)
cat("Accuracy: ", accuracy, "\n")
precision <- matriz_confusion["Y", "Y"] / (matriz_confusion["Y", "Y"] + matriz_confusion["Y", "N"])
recall <- matriz_confusion["Y", "Y"] / (matriz_confusion["Y", "Y"] + matriz_confusion["N", "Y"])
cat("Precision: ", precision, "\n")
cat("Recall: ", recall, "\n")
f1_score <- 2 * ((precision * recall) / (precision + recall))
cat("F1-Score: ", f1_score, "\n")
# Crear un data frame con las métricas
metrics_df <- data.frame(
Metric = c("Accuracy", "Precision", "Recall", "F1-Score"),
Value = c(0.69, 0.6838726, 0.7088102, 0.6961182)
)
# Crear el gráfico de barras con etiquetas de porcentaje y una escala de colores
ggplot(metrics_df, aes(x = Metric, y = Value, fill = Value)) +
geom_bar(stat = "identity") +
geom_text(aes(label = scales::percent(Value)), vjust = -0.3, size = 4) +  # Etiquetas en las barras
ylim(0, 1) +  # Ajustar el eje y para que vaya de 0 a 1
labs(title = "Métricas del Modelo de Clasificación",
x = "Métrica",
y = "Valor") +
scale_fill_gradient(low = "blue", high = "lightblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
#install.packages("rpart")
#install.packages("writexl")
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("rpart.plot")
#install.packages("caret")
#install.packages("pROC")
#install.packages("plotly")
library(rpart)
library(writexl)
library(dplyr)
library(ggplot2)
library(rpart.plot)
library(caret)
library(pROC)
library(plotly)
library(reshape2)
library(scales)
# Cargamos los datos
fumadores = read.csv("data/smoking_driking_dataset_Ver01.csv", header = TRUE, sep = ",")
tinytex::reinstall_tinytex(repository = "illinois")
update-tlmgr-latest.sh --update
update-tlmgr-latest.sh --update
install.packages("tinytex")
install.packages("tinytex")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("rpart")
#install.packages("writexl")
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("rpart.plot")
#install.packages("caret")
#install.packages("pROC")
#install.packages("plotly")
install.packages("tinytex")
library(rpart)
library(writexl)
library(dplyr)
library(ggplot2)
library(rpart.plot)
library(caret)
library(pROC)
library(plotly)
library(reshape2)
library(scales)
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
tinytex::tlmgr_install("bookmark")
tlmgr update --all --self
tinytex::tlmgr_install("bookmark")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("rpart")
#install.packages("writexl")
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("rpart.plot")
#install.packages("caret")
#install.packages("pROC")
#install.packages("plotly")
library(rpart)
library(writexl)
library(dplyr)
library(ggplot2)
library(rpart.plot)
library(caret)
library(pROC)
library(plotly)
library(reshape2)
library(scales)
# Cargamos los datos
fumadores = read.csv("data/smoking_driking_dataset_Ver01.csv", header = TRUE, sep = ",")
# Achicamos la informacion en terminos de observaciones
set.seed(44512364)
fumadores_50 <- fumadores[sample(nrow(fumadores), 50000), ]
write.csv(fumadores_50, "data/reducido.csv", row.names = FALSE)
remove(fumadores)
# Modificamos las variables categoricas de numeros a palabras:
# Modificar la variable 'hear_left'
fumadores_50$hear_left <- factor(fumadores_50$hear_left,
levels = c(1.0, 2.0),
labels = c("normal", "abnormal"))
# Modificar la variable 'hear_right'
fumadores_50$hear_right <- factor(fumadores_50$hear_right,
levels = c(1.0, 2.0),
labels = c("normal", "abnormal"))
# Modificar la variable 'SMK_stat_type_cd'
fumadores_50$SMK_stat_type_cd <- factor(fumadores_50$SMK_stat_type_cd,
levels = c(1.0, 2.0, 3.0),
labels = c("never", "used to smoke but quit",
"still smoke"))
# Modificar la variable 'urine_protein'
fumadores_50$urine_protein <- factor(fumadores_50$urine_protein,
levels = c(1, 2, 3, 4, 5, 6),
labels = c("Negativo (-)", "Trazas (+/-)",
"Bajo (+1)", "Moderado (+2)",
"Alto (+3)", "Muy alto (+4)"))
# Modificar la variable 'DRK_YN'
fumadores_50$DRK_YN <- as.factor(fumadores_50$DRK_YN)
num_observaciones <- nrow(fumadores_50)
num_predictores <- ncol(fumadores_50)
cat("Número de observaciones:", num_observaciones, "\n")
cat("Número de predictores:", num_predictores, "\n")
# Definir el vector con los nombres de las variables principales
variables <- c("age", "gamma_GTP", "HDL_chole", "waistline", "SBP", "LDL_chole",
"triglyceride", "hemoglobin", "SGOT_AST", "SGOT_ALT", "BLDS")
# Seleccionar las variables principales
variables_principales <- fumadores_50[, variables]
# Mostrar la estructura de las variables seleccionadas
str(variables_principales)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("rpart")
#install.packages("writexl")
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("rpart.plot")
#install.packages("caret")
#install.packages("pROC")
#install.packages("plotly")
library(rpart)
library(writexl)
library(dplyr)
library(ggplot2)
library(rpart.plot)
library(caret)
library(pROC)
library(plotly)
library(reshape2)
library(scales)
# Crear el scatter plot para Gamma-GTP con línea de regresión
ggplot(fumadores_50, aes(x = as.factor(DRK_YN),
y = gamma_GTP,
fill = as.factor(DRK_YN))) + geom_boxplot(alpha = 0.5) +
ylim(0, 50) +  # Ajustar el eje y
labs(
title = "Gamma-GTP según Consumo de Alcohol",
x = "Consumo de Alcohol (0 = No, 1 = Sí)",
y = "Gamma-GTP"
) +
scale_fill_manual(values = c("light blue", "blue")) +
scale_color_manual(name = "Trend", values = c("blue")) +
theme_minimal() +
theme(legend.position = "none")
