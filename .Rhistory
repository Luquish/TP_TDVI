K_estimado <- exp(ln_K_estimado)  # Estimación de K
# Estimar alpha
alpha_estimado <- coef(modelo)[1]  # Coeficiente de intersección (alpha)
# Mostrar los valores estimados de K y alpha
cat("Valor estimado de K:", K_estimado, "\n")
cat("Valor estimado de alpha:", alpha_estimado, "\n")
# Estimamos la desviación estándar de ln(Resistencia) a partir de los residuos
residuos <- residuals(modelo)
desviacion_estandar_ln_resistencia <- sd(residuos)
# Calculamos la media de ln(Resistencia)
media_ln_resistencia <- coef(modelo)[2]  # Coeficiente de pendiente (ln(K))
# Calculamos el percentil 90 de la distribución de ln(Resistencia)
percentil_90_ln_resistencia <- qnorm(0.9, mean = media_ln_resistencia, sd = desviacion_estandar_ln_resistencia)
# Calculamos la máxima resistencia media con un 90% de seguridad
maxima_resistencia_media <- exp(percentil_90_ln_resistencia)  # Antilogaritmo del percentil 90
# Resultado
cat("La máxima resistencia media con un 90% de seguridad es:", maxima_resistencia_media, "\n")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(ggplot2)
# Leemos los datos desde un archivo Excel (.xlsx)
datos <- read_excel("L_MAZZARELLO_CHIARA_LUCIA_107146.xlsx")
# Creamos un diagrama de dispersión
plot(datos$Tiempo, datos$Resistencia,
main = "Diagrama de Dispersión: Resistencia vs. Tiempo",
xlab = "Tiempo de Tratamiento (Horas)", ylab = "Resistencia (Kg/mm2)",
pch = 19, col = "blue")
# Creamos un diagrama de dispersión de los datos originales
par(mfrow = c(2, 2))  # Crear un diseño de 2x2 para mostrar 4 gráficos
# Gráfico 1: Transformación de Raíz Cúbica
plot((datos$Tiempo)^(1/3), datos$Resistencia,
main = "Transformación de Raíz Cúbica",
xlab = "Raíz Cúbica del Tiempo", ylab = "Resistencia (Kg/mm2)",
pch = 19, col = "yellow")
# Gráfico 2: Transformación de Raíz Cuadrada
plot(sqrt(datos$Tiempo), datos$Resistencia,
main = "Transformación de Raíz Cuadrada",
xlab = "Raíz Cuadrada del Tiempo", ylab = "Resistencia (Kg/mm2)",
pch = 19, col = "red")
# Gráfico 3: Transformación de Logaritmo Natural
plot(log(datos$Tiempo), datos$Resistencia,
main = "Transformación de Logaritmo Natural",
xlab = "Logaritmo Natural del Tiempo", ylab = "Resistencia (Kg/mm2)",
pch = 19, col = "green")
# Gráfico 4: Transformación de Recíproco
plot(1/datos$Tiempo, datos$Resistencia,
main = "Transformación de Recíproco",
xlab = "Recíproco del Tiempo", ylab = "Resistencia (Kg/mm2)",
pch = 19, col = "purple")
# Aplicamos una transformación logarítmica a la Resistencia
datos$Ln_Resistencia <- log(datos$Resistencia)
# Ajustamos el modelo de regresión lineal
modelo <- lm(Ln_Resistencia ~ -Tiempo, data = datos)
# Resumen del modelo
summary(modelo)
# Generamos un gráfico de dispersión para comprobar el modelo lineal
plot(datos$Tiempo, datos$Ln_Resistencia,
main = "Modelo Linealizado: ln(Resistencia) vs. Tiempo",
xlab = "Tiempo de Tratamiento (Horas)", ylab = "ln(Resistencia)",
pch = 19, col = "blue")
# Añadimos la línea de regresión al gráfico
abline(modelo, col = "red")
# Estimar K
ln_K_estimado <- coef(modelo)[2]  # Coeficiente de pendiente (ln(K))
K_estimado <- exp(ln_K_estimado)  # Estimación de K
# Estimar alpha
alpha_estimado <- coef(modelo)[1]  # Coeficiente de intersección (alpha)
# Mostrar los valores estimados de K y alpha
cat("Valor estimado de K:", K_estimado, "\n")
cat("Valor estimado de alpha:", alpha_estimado, "\n")
# Estimamos la desviación estándar de ln(Resistencia) a partir de los residuos
residuos <- residuals(modelo)
desviacion_estandar_ln_resistencia <- sd(residuos)
# Calculamos la media de ln(Resistencia)
media_ln_resistencia <- coef(modelo)[2]  # Coeficiente de pendiente (ln(K))
# Calculamos el percentil 90 de la distribución de ln(Resistencia)
percentil_90_ln_resistencia <- qnorm(0.9, mean = media_ln_resistencia, sd = desviacion_estandar_ln_resistencia)
# Calculamos la máxima resistencia media con un 90% de seguridad
maxima_resistencia_media <- exp(percentil_90_ln_resistencia)  # Antilogaritmo del percentil 90
# Resultado
cat("La máxima resistencia media con un 90% de seguridad es:", maxima_resistencia_media, "\n")
# Creamos un nuevo DataFrame para almacenar los valores ajustados y los intervalos
nuevo_datos <- datos
nuevo_datos$Valores_Ajustados <- predict(modelo, interval = "confidence", level = 0.90)[, 1]  # Intervalo de confianza al 90%
nuevo_datos$Intervalo_Confianza_Inf <- predict(modelo, interval = "confidence", level = 0.90)[, 2]  # Límite inferior
nuevo_datos$Intervalo_Confianza_Sup <- predict(modelo, interval = "confidence", level = 0.90)[, 3]  # Límite superior
nuevo_datos$Intervalo_Prediccion_Inf <- predict(modelo, interval = "prediction", level = 0.90)[, 2]  # Límite inferior (predicción)
nuevo_datos$Intervalo_Prediccion_Sup <- predict(modelo, interval = "prediction", level = 0.90)[, 3]  # Límite superior (predicción)
# Creamos el gráfico de dispersión con intervalos de confianza y predicción al 90%
ggplot(nuevo_datos, aes(x = Tiempo, y = Ln_Resistencia)) +
geom_point(aes(color = "datos"), size = 3, alpha = 0.7) +
geom_line(aes(x = Tiempo, y = Valores_Ajustados, color = "Ajuste"), size = 1) +
geom_ribbon(aes(x = Tiempo, ymin = Intervalo_Confianza_Inf, ymax = Intervalo_Confianza_Sup, fill = "Intervalo de Confianza"), alpha = 0.3) +
geom_ribbon(aes(x = Tiempo, ymin = Intervalo_Prediccion_Inf, ymax = Intervalo_Prediccion_Sup, fill = "Intervalo de Predicción"), alpha = 0.3) +
labs(x = "Tiempo de Tratamiento (Horas)", y = "ln(Resistencia)", color = "Leyenda") +
scale_fill_manual(values = c("Intervalo de Confianza" = "blue", "Intervalo de Predicción" = "red")) +
theme_minimal()
knitr::include_graphics("plots/Net1/dot.gv.pdf")
c.  **Procedimiento 'Set Replacement Orders':** Convierte los borradores
\documentclass{article}
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rpart") # Descomentar si no lo tienen ya instalado.
library(rpart)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
library(rpart)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
medallista = read.csv("medallists.csv", header = TRUE, sep = ",")
# Cargamos los datos
medallista = read.csv("medallists.csv", header = TRUE, sep = ",")
# Finetuneamos
# Agrupar por 'discipline', 'country', y 'medal_code', y eliminar duplicados
medallas_agrupadas <- mi_dataset %>%
distinct(discipline, country, medal_code, .keep_all = TRUE) %>%
group_by(discipline, country, medal_code) %>%
summarise(total_medallas = n())
# Cargamos los datos
medallistas = read.csv("medallists.csv", header = TRUE, sep = ",")
# Finetuneamos
# Agrupar por 'discipline', 'country', y 'medal_code', y eliminar duplicados
medallas_agrupadas <- medallistas %>%
distinct(discipline, country, medal_code, .keep_all = TRUE) %>%
group_by(discipline, country, medal_code) %>%
summarise(total_medallas = n())
# Cargamos los datos
medallistas = read.csv("medallists.csv", header = TRUE, sep = ",")
# Finetuneamos
# Agrupar por 'discipline', 'country', y 'medal_code', y eliminar duplicados
medallas_agrupadas <- medallistas %>%
distinct(discipline, country, medal_code, .keep_all = TRUE)
# Cargamos los datos
medallistas = read.csv("medallists.csv", header = TRUE, sep = ",")
# Finetuneamos
# Agrupar por 'discipline', 'country', y 'medal_code', y eliminar duplicados
medallas_agrupadas <- medallistas
distinct(discipline, country, medal_code, .keep_all = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
install.packages("dplyr")
# Cargamos los datos
medallistas = read.csv("medallists.csv", header = TRUE, sep = ",")
# Finetuneamos
# Agrupar por 'discipline', 'country', y 'medal_code', y eliminar duplicados
medallas_agrupadas <- medallistas
distinct(discipline, country, medal_code, .keep_all = TRUE)
# Cargamos los datos
medallistas = read.csv("medallists.csv", header = TRUE, sep = ",")
# Finetuneamos
# Agrupar por 'discipline', 'country', y 'medal_code', y eliminar duplicados
resultado <- medallistas %>%
distinct(discipline, country, medal_code, .keep_all = TRUE) %>%
group_by(discipline, country, medal_code) %>%
summarise(total_medallas = n())
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
install.packages("dplyr")
library("rpart")
library("writexl")
library("dplyr")
# Cargamos los datos
medallistas = read.csv("medallists.csv", header = TRUE, sep = ",")
# Finetuneamos
# Agrupar por 'discipline', 'country', y 'medal_code', y eliminar duplicados
resultado <- medallistas %>%
distinct(discipline, country, medal_code, .keep_all = TRUE) %>%
group_by(discipline, country, medal_code) %>%
summarise(total_medallas = n())
# Cargamos los datos
medallistas = read.csv("medallists.csv", header = TRUE, sep = ",")
# Finetuneamos
# Agrupar por 'discipline', 'country', y 'medal_code', y eliminar duplicados
resultado <- medallistas %>%
distinct(discipline, country, medal_code, .keep_all = TRUE) %>%
group_by(discipline, country, medal_code) %>%
summarise(total_medallas = n())
# Cargamos los datos
alzheimer = read.csv("alzheimers_disease_data.csv", header = TRUE, sep = ",")
# Ethnicity
alzheimer <- alzheimer %>%
mutate(ethnicity = recode(ethnicity,
`0` = "Caucasian",
`1` = "African American",
`2` = "Asian",
`3` = "Other"))
# Ethnicity
alzheimer <- alzheimer %>%
mutate(Ethnicity = recode(Ethnicity,
`0` = "Caucasian",
`1` = "African American",
`2` = "Asian",
`3` = "Other"))
# Gender
alzheimer <- alzheimer %>%
mutate(gender = recode(gender,
`0` = "Male",
`1` = "Female"))
# Ethnicity
alzheimer <- alzheimer %>%
mutate(Ethnicity = recode(Ethnicity,
`0` = "Caucasian",
`1` = "African American",
`2` = "Asian",
`3` = "Other"))
# Gender
alzheimer <- alzheimer %>%
mutate(Gender = recode(Gender,
`0` = "Male",
`1` = "Female"))
# EducationLevel
alzheimer <- alzheimer %>%
mutate(EducationLevel = recode(EducationLevel,
`0` = "None",
`1` = "High School",
`2` = "Bachelor's",
`3` = "Higher"))
# Variables de si y no
alzheimer <- alzheimer %>%
mutate(Smoking = recode(Smoking, `0` = "No", `1` = "Yes"),                                          # Smoking
FamilyHistoryAlzheimers = recode(FamilyHistoryAlzheimers, `0` = "No", `1` = "Yes"),          # FamilyHistoryAlzheimers
CardiovascularDisease = recode(CardiovascularDisease, `0` = "No", `1` = "Yes"),              # CardiovascularDisease
Diabetes = recode(Diabetes, `0` = "No", `1` = "Yes"),                                        # Diabetes
Depression = recode(Depression, `0` = "No", `1` = "Yes"),                                    # Depression
HeadInjury = recode(HeadInjury, `0` = "No", `1` = "Yes"),                                    # HeadInjury
Hypertension = recode(Hypertension, `0` = "No", `1` = "Yes"),                                # Hypertension
BehavioralProblems = recode(BehavioralProblems, `0` = "No", `1` = "Yes"),                    # BehavioralProblems
Confusion = recode(Confusion, `0` = "No", `1` = "Yes"),                                      # Confusion
Disorientation = recode(Disorientation, `0` = "No", `1` = "Yes"),                            # Disorientation
PersonalityChanges = recode(PersonalityChanges, `0` = "No", `1` = "Yes"),                    # PersonalityChanges
DifficultyCompletingTasks = recode(DifficultyCompletingTasks, `0` = "No", `1` = "Yes"),      # DifficultyCompletingTasks
Forgetfulness = recode(Forgetfulness, `0` = "No", `1` = "Yes"),                              # Forgetfulness
Diagnosis = recode(Diagnosis,  `0` = "No", `1` = "Yes"))                                     # Diagnosis
# Verificar el número de observaciones y predictores
num_observaciones <- nrow(alzheimer)
num_predictores <- ncol(alzheimer)
cat("Número de observaciones:", num_observaciones, "\n")
cat("Número de predictores:", num_predictores, "\n")
# Cargamos los datos
fumadores = read.csv("smoking_driking_dataset_Ver01", header = TRUE, sep = ",")
# Cargamos los datos
fumadores = read.csv("smoking_driking_dataset_Ver01", header = TRUE, sep = ",")
# Cargamos los datos
fumadores = read.csv("smoking_driking_dataset_Ver01.csv", header = TRUE, sep = ",")
# Verificar el número de observaciones y predictores
num_observaciones <- nrow(fumadores)
num_predictores <- ncol(fumadores)
cat("Número de observaciones:", num_observaciones, "\n")
cat("Número de predictores:", num_predictores, "\n")
# Cargamos los datos
fumadores = read.csv("data/smoking_driking_dataset_Ver01.csv", header = TRUE, sep = ",")
# Verificar el número de observaciones y predictores
num_observaciones <- nrow(fumadores)
num_predictores <- ncol(fumadores)
cat("Número de observaciones:", num_observaciones, "\n")
cat("Número de predictores:", num_predictores, "\n")
# Establecer la semilla para la replicabilidad
set.seed(44512364)
# Realizar un muestreo aleatorio de 50,000 observaciones
fumadores_50 <- df[sample(nrow(df), 50000), ]
# Establecer la semilla para la replicabilidad
set.seed(44512364)
# Realizar un muestreo aleatorio de 50,000 observaciones
fumadores_50 <- fumadores[sample(nrow(df), 50000), ]
# Establecer la semilla para la replicabilidad
set.seed(44512364)
# Realizar un muestreo aleatorio de 50,000 observaciones
fumadores_50 <- fumadores[sample(nrow(fumadores), 50000), ]
# Guardar el archivo reducido en la carpeta 'data'
write.csv(fumadores_50, "data/reducido.csv", row.names = FALSE)
# Achicamos la informacion en terminos de observaciones
set.seed(44512364)
fumadores_50 <- fumadores[sample(nrow(fumadores), 50000), ]
write.csv(fumadores_50, "data/reducido.csv", row.names = FALSE)
# Modificamos las variables categoricas de numeros a palabras:
# Modificar la variable 'hear_left'
fumadores_50$hear_left <- factor(fumadores_50$hear_left,
levels = c(1.0, 2.0),
labels = c("normal", "abnormal"))
# Modificar la variable 'hear_right'
fumadores_50$hear_right <- factor(fumadores_50$hear_right,
levels = c(1.0, 2.0),
labels = c("normal", "abnormal"))
# Modificar la variable 'SMK_stat_type_cd'
fumadores_50$SMK_stat_type_cd <- factor(fumadores_50$SMK_stat_type_cd,
levels = c(1.0, 2.0, 3.0),
labels = c("never", "used to smoke but quit", "still smoke"))
str(fumadores_50)
fumadores_50$hear_left
# install.packages("rpart") # Descomentar si no lo tienen ya instalado.
library(rpart)
# install.packages("titanic") # Descomentar si no lo tienen ya instalado.
library(titanic)
train <- titanic_train
test <- titanic_test
str(train)
train$Pclass <- as.factor(train$Pclass)
train$Sex <- as.factor(train$Sex)
# install.packages("rpart") # Descomentar si no lo tienen ya instalado.
library(rpart)
# install.packages("titanic") # Descomentar si no lo tienen ya instalado.
library(titanic)
train <- titanic_train
test <- titanic_test
train$Pclass <- as.factor(train$Pclass)
train$Sex <- as.factor(train$Sex)
# install.packages("rpart") # Descomentar si no lo tienen ya instalado.
library(rpart)
train$Pclass <- as.factor(train$Pclass)
train$Sex <- as.factor(train$Sex)
train$Pclass <- as.factor(train$Pclass)
train$Sex <- as.factor(train$Sex)
table(is.na(train))
summary(train)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
install.packages("dplyr")
library("rpart")
library("writexl")
library("dplyr")
# Cargamos los datos
fumadores = read.csv("smoking_driking_dataset_Ver01.csv", header = TRUE, sep = ",")
# Cargamos los datos
fumadores = read.csv("data/smoking_driking_dataset_Ver01.csv", header = TRUE, sep = ",")
# Verificar el número de observaciones y predictores
num_observaciones <- nrow(fumadores)
num_predictores <- ncol(fumadores)
cat("Número de observaciones:", num_observaciones, "\n")
cat("Número de predictores:", num_predictores, "\n")
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
install.packages("dplyr")
library("rpart")
library("writexl")
library("dplyr")
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
install.packages("dplyr")
install.packages("ggplot2")
library("rpart")
library("writexl")
library("dplyr")
library("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
install.packages("dplyr")
install.packages("ggplot2")
library("rpart")
library("writexl")
library("dplyr")
library("ggplot2")
# Seleccionar las variables principales junto con la variable 'fumadores_50'
variables_principales <- df %>%
select(age, height, weight, waistline, SBP, LDL_chole, triglyceride, hemoglobin, fumadores_50)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
install.packages("dplyr")
install.packages("ggplot2")
library("rpart")
library("writexl")
library("dplyr")
library("ggplot2")
# Seleccionar las variables principales junto con la variable 'fumadores_50'
variables_principales <- df %>%
select(age, height, weight, waistline, SBP, LDL_chole, triglyceride, hemoglobin, fumadores_50)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
install.packages("dplyr")
install.packages("ggplot2")
library("rpart")
library("writexl")
library("dplyr")
library("ggplot2")
# Cargamos los datos
fumadores = read.csv("data/smoking_driking_dataset_Ver01.csv", header = TRUE, sep = ",")
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
install.packages("dplyr")
install.packages("ggplot2")
library("rpart")
library("writexl")
library("dplyr")
library("ggplot2")
# Cargamos los datos
fumadores = read.csv("data/smoking_driking_dataset_Ver01.csv", header = TRUE, sep = ",")
# Verificar el número de observaciones y predictores
num_observaciones <- nrow(fumadores)
num_predictores <- ncol(fumadores)
cat("Número de observaciones:", num_observaciones, "\n")
cat("Número de predictores:", num_predictores, "\n")
# Achicamos la informacion en terminos de observaciones
set.seed(44512364)
fumadores_50 <- fumadores[sample(nrow(fumadores), 50000), ]
write.csv(fumadores_50, "data/reducido.csv", row.names = FALSE)
# Modificamos las variables categoricas de numeros a palabras:
# Modificar la variable 'hear_left'
fumadores_50$hear_left <- factor(fumadores_50$hear_left,
levels = c(1.0, 2.0),
labels = c("normal", "abnormal"))
# Modificar la variable 'hear_right'
fumadores_50$hear_right <- factor(fumadores_50$hear_right,
levels = c(1.0, 2.0),
labels = c("normal", "abnormal"))
# Modificar la variable 'SMK_stat_type_cd'
fumadores_50$SMK_stat_type_cd <- factor(fumadores_50$SMK_stat_type_cd,
levels = c(1.0, 2.0, 3.0),
labels = c("never", "used to smoke but quit", "still smoke"))
# Seleccionar las variables principales junto con la variable 'fumadores_50'
variables_principales <- df %>%
select(age, height, weight, waistline, SBP, LDL_chole, triglyceride, hemoglobin, fumadores_50)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
install.packages("dplyr")
install.packages("ggplot2")
library("rpart")
library("writexl")
library("dplyr")
library("ggplot2")
# Cargamos los datos
fumadores = read.csv("data/smoking_driking_dataset_Ver01.csv", header = TRUE, sep = ",")
# Verificar el número de observaciones y predictores
num_observaciones <- nrow(fumadores)
num_predictores <- ncol(fumadores)
cat("Número de observaciones:", num_observaciones, "\n")
cat("Número de predictores:", num_predictores, "\n")
# Achicamos la informacion en terminos de observaciones
set.seed(44512364)
fumadores_50 <- fumadores[sample(nrow(fumadores), 50000), ]
write.csv(fumadores_50, "data/reducido.csv", row.names = FALSE)
# Modificamos las variables categoricas de numeros a palabras:
# Modificar la variable 'hear_left'
fumadores_50$hear_left <- factor(fumadores_50$hear_left,
levels = c(1.0, 2.0),
labels = c("normal", "abnormal"))
# Modificar la variable 'hear_right'
fumadores_50$hear_right <- factor(fumadores_50$hear_right,
levels = c(1.0, 2.0),
labels = c("normal", "abnormal"))
# Modificar la variable 'SMK_stat_type_cd'
fumadores_50$SMK_stat_type_cd <- factor(fumadores_50$SMK_stat_type_cd,
levels = c(1.0, 2.0, 3.0),
labels = c("never", "used to smoke but quit", "still smoke"))
# Seleccionar las variables principales junto con la variable 'fumadores_50'
variables_principales <- fumadores_50 %>%
select(age, height, weight, waistline, SBP, LDL_chole, triglyceride, hemoglobin, fumadores_50)
# Seleccionar las variables principales junto con la variable 'fumadores_50'
variables_principales <- fumadores_50 %>%
select(all_of(age, height, weight, waistline, SBP, LDL_chole, triglyceride, hemoglobin, fumadores_50))
# Seleccionar las variables principales junto con la variable 'fumadores_50'
variables_principales <- fumadores_50 %>%
select(all_of(age, height, fumadores_50))
# Seleccionar las variables principales junto con la variable 'fumadores_50'
# Definir el vector con los nombres de las variables principales
variables <- c("age", "height", "weight", "waistline", "SBP", "LDL_chole", "triglyceride", "hemoglobin", "fumadores_50")
# Seleccionar las variables principales utilizando all_of()
variables_principales <- fumadores_50 %>%
select(all_of(variables))
# Seleccionar las variables principales junto con la variable 'fumadores_50'
# Definir el vector con los nombres de las variables principales
variables <- c("age", "height", "weight", "waistline", "SBP", "LDL_chole", "triglyceride", "hemoglobin")
# Seleccionar las variables principales utilizando all_of()
variables_principales <- fumadores_50 %>%
select(all_of(variables))
# Imprimir las variables principales
print(variables_principales)
# Definir el vector con los nombres de las variables principales
variables <- c("age", "height", "weight", "waistline", "SBP", "LDL_chole", "triglyceride", "hemoglobin", "fumadores_50")
# Seleccionar las variables principales
variables_principales <- fumadores_50[, variables]
# Definir el vector con los nombres de las variables principales
variables <- c("age", "height", "weight", "waistline", "SBP", "LDL_chole", "triglyceride", "hemoglobin")
# Seleccionar las variables principales
variables_principales <- fumadores_50[, variables]
# Mostrar la estructura de las variables seleccionadas
str(variables_principales)
View(fumadores_50)
View(fumadores_50)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
install.packages("dplyr")
install.packages("ggplot2")
library("rpart")
library("writexl")
library("dplyr")
library("ggplot2")
# Cargamos los datos
fumadores = read.csv("data/smoking_driking_dataset_Ver01.csv", header = TRUE, sep = ",")
knitr::opts_chunk$set(echo = TRUE)
install.packages("rpart")
install.packages("writexl")
install.packages("dplyr")
install.packages("ggplot2")
library("rpart")
library("writexl")
library("dplyr")
library("ggplot2")
